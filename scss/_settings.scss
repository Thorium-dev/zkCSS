// Variables
$columns: 5;
$gutter: 2%;
$breakpoints: 480 768 992 1200;

// Mixins
@mixin grid (
  $columns: $columns,
  $gutter: $gutter,
  $breakpoints: $breakpoints
) {
  [class^='_container-'] {
    border: 1px solid red;
    display: flex;
    flex-flow: row wrap;
    justify-content: space-around;
    // Forcer le retour à la ligne
    &._wrap {
      flex-flow: row wrap;
    }
    // Alignement vertical des enfants possédant la class _box
    &._align-top {
      align-items: flex-start;
    }
    &._align-center {
      align-items: center;
    }
    &._align-bottom {
      align-items: flex-end;
    }
    // Alignement horizontale des enfants possédant la class _box
    &._pull-left {
      justify-content: flex-start;
    }
    &._pull-center {
      justify-content: center;
    }
    &._pull-right {
      justify-content: flex-end;
    }
    // ...
    &._collapse {
      justify-content: space-between;
    }
    // Empêcher le retour à la ligne
    &._nowrap {
      flex-flow: row nowrap;
    }

    ._box {
      // Alignement vertical de chaque item
      &._align-top {
        align-self: flex-start;
      }
      &._align-center {
        align-self: center;
      }
      &._align-bottom {
        align-self: flex-end;
      }
    }

  }

  @for $i from 1 through $columns {
    ._container-#{$i} {
      ._box {
        width: (100% - ($gutter * ($i + 1))) / $i;
      }
    }
  }

  @each $breakpoint in $breakpoints {
    @media screen and (max-width: #{$breakpoint}px) {
      @for $i from 1 through $columns {
        ._container-#{$breakpoint}-#{$i} {
          ._box {
            width: (100% - ($gutter * ($i + 1))) / $i;
          }
        }
      }
    }
  }

  $last: nth($breakpoints, length($breakpoints));
  @media screen and (min-width: #{$last + 1}px) {
    ._container {
      width: 100%;
      max-width: #{$last}px;
      margin: auto;
    }

  }

}






